pipeline {
    agent any
    environment {
        DOCKER_HUB_CREDS = credentials("DOCKER_HUB_CREDS")
        DATABASE_URI = credentials("DATABASE_URI")
        MYSQL_ROOT_PASSWORD=credentials("MYSQL_ROOT_PASSWORD")
        MYSQL_DATABASE=credentials("MYSQL_DATABASE")
        MYSQL_USER=credentials("MYSQL_USER")    
        MYSQL_PASSWORD=credentials("MYSQL_PASSWORD")
        CREATE_SCHEMA=true
        DOCKER_HUB_CREDS_USR=credentials("DOCKER_HUB_CREDS_USR")
        DOCKER_HUB_CREDS_PSW=credentials("DOCKER_HUB_CREDS_PSW")        
    }
    stages {
        stage('Setup') {
            steps {
                sh "bash jenkins/setup.sh"
            }
        }
        stage('Test') {
            steps {
                sh "bash jenkins/test.sh"
            }
        }
        stage('Build') {
            steps {
                sh 'sudo usermod -aG docker ${USER}'
                sh 'sudo chmod 666 /var/run/docker.sock'
                sh "bash jenkins/build.sh"
            }
        }
                stage('Push') {
            steps {
                script {
                  sh'echo "$DOCKER_HUB_CREDS_PSW" | docker login -u "$DOCKER_HUB_CREDS_USR" --password-stdin'
                }
                sh "bash jenkins/push.sh"
            }
        }
        stage('Deploy') {
            steps {
                sh "scp -i ~/.ssh/id_rsa docker-compose.yaml jenkins@20.126.103.180:/home/jenkins/docker-compose.yaml"
                sh "ssh -i ~/.ssh/id_rsa jenkins@20.126.103.180 \
                DOCKER_HUB_CREDS_USR=$DOCKER_HUB_CREDS_USR \
                CREATE_SCHEMA=true \
                DATABASE_URI=$DATABASE_URI \
                MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \
                MYSQL_DATABASE=$MYSQL_DATABASE \
                MYSQL_USER=$MYSQL_USER \   
                MYSQL_PASSWORD=$MYSQL_PASSWORD \
                docker stack deploy --compose-file docker-compose.yaml DFE-project"                
            }
        }
    }   
        post {
        always {
            junit 'test_reports/*_junit_report.xml'
            cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'test_reports/*_coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
        }
    }

}

